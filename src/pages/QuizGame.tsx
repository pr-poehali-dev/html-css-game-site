
import { useState } from "react";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import { Button } from "@/components/ui/button";
import { Check, X } from "lucide-react";

interface Question {
  question: string;
  options: string[];
  correctAnswer: number;
}

const QuizGame = () => {
  const quizQuestions: Question[] = [
    {
      question: "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?",
      options: ["–í–µ–Ω–µ—Ä–∞", "–ú–µ—Ä–∫—É—Ä–∏–π", "–ú–∞—Ä—Å", "–ó–µ–º–ª—è"],
      correctAnswer: 1
    },
    {
      question: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—Ä–æ–Ω —É –ø—è—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞?",
      options: ["4", "5", "6", "7"],
      correctAnswer: 1
    },
    {
      question: "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –º—É–¥—Ä–æ—Å—Ç–∏?",
      options: ["–õ–µ–≤", "–°–ª–æ–Ω", "–°–æ–≤–∞", "–î–µ–ª—å—Ñ–∏–Ω"],
      correctAnswer: 2
    },
    {
      question: "–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º 'Fe' –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ?",
      options: ["–§—Ç–æ—Ä", "–ñ–µ–ª–µ–∑–æ", "–§–µ—Ä–º–∏–π", "–§–æ—Å—Ñ–æ—Ä"],
      correctAnswer: 1
    },
    {
      question: "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ä–æ–º–∞–Ω '–í–æ–π–Ω–∞ –∏ –º–∏—Ä'?",
      options: ["–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–ò–≤–∞–Ω –¢—É—Ä–≥–µ–Ω–µ–≤", "–ù–∏–∫–æ–ª–∞–π –ì–æ–≥–æ–ª—å", "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"],
      correctAnswer: 3
    }
  ];

  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [selectedOption, setSelectedOption] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [quizComplete, setQuizComplete] = useState(false);
  const [answers, setAnswers] = useState<{ question: string; correct: boolean }[]>([]);

  const handleOptionSelect = (optionIndex: number) => {
    if (selectedOption !== null) return; // Prevent changing answer after selection
    setSelectedOption(optionIndex);

    const isCorrect = optionIndex === quizQuestions[currentQuestionIndex].correctAnswer;
    
    if (isCorrect) {
      setScore(score + 1);
    }

    setAnswers([...answers, {
      question: quizQuestions[currentQuestionIndex].question,
      correct: isCorrect
    }]);

    setShowResult(true);
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < quizQuestions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedOption(null);
      setShowResult(false);
    } else {
      setQuizComplete(true);
    }
  };

  const restartQuiz = () => {
    setCurrentQuestionIndex(0);
    setScore(0);
    setSelectedOption(null);
    setShowResult(false);
    setQuizComplete(false);
    setAnswers([]);
  };

  const currentQuestion = quizQuestions[currentQuestionIndex];

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      <main className="flex-1 container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold text-center mb-6">–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</h1>
        
        {!quizComplete ? (
          <div className="max-w-2xl mx-auto bg-white rounded-xl shadow-md p-6 mb-8">
            {/* Progress bar */}
            <div className="mb-6">
              <div className="h-2 w-full bg-secondary rounded-full overflow-hidden">
                <div 
                  className="h-full bg-primary rounded-full transition-all duration-300" 
                  style={{ width: `${((currentQuestionIndex + 1) / quizQuestions.length) * 100}%` }}
                ></div>
              </div>
              <div className="text-right mt-1 text-sm text-gray-600">
                –í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {quizQuestions.length}
              </div>
            </div>
            
            {/* Question */}
            <div className="mb-6">
              <h2 className="text-xl font-bold mb-4">{currentQuestion.question}</h2>
              
              <div className="space-y-3">
                {currentQuestion.options.map((option, index) => (
                  <button
                    key={index}
                    className={`w-full text-left p-4 rounded-lg border transition-all ${
                      selectedOption === index
                        ? selectedOption === currentQuestion.correctAnswer
                          ? "bg-green-100 border-green-500"
                          : "bg-red-100 border-red-500"
                        : "bg-white border-gray-200 hover:border-primary"
                    } ${selectedOption !== null ? "" : "hover:shadow-md"}`}
                    onClick={() => handleOptionSelect(index)}
                    disabled={selectedOption !== null}
                  >
                    <div className="flex items-center justify-between">
                      <span>{option}</span>
                      {selectedOption === index && (
                        selectedOption === currentQuestion.correctAnswer ? (
                          <Check className="h-5 w-5 text-green-600" />
                        ) : (
                          <X className="h-5 w-5 text-red-600" />
                        )
                      )}
                    </div>
                  </button>
                ))}
              </div>
            </div>
            
            {/* Result message */}
            {showResult && (
              <div className={`p-4 mb-4 rounded-lg ${
                selectedOption === currentQuestion.correctAnswer 
                  ? "bg-green-100 text-green-800" 
                  : "bg-red-100 text-red-800"
              }`}>
                {selectedOption === currentQuestion.correctAnswer 
                  ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç" 
                  : `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQuestion.options[currentQuestion.correctAnswer]}`
                }
              </div>
            )}
            
            {/* Next button */}
            {showResult && (
              <Button 
                onClick={handleNextQuestion}
                className="w-full"
              >
                {currentQuestionIndex < quizQuestions.length - 1 ? "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" : "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"}
              </Button>
            )}
          </div>
        ) : (
          <div className="max-w-2xl mx-auto bg-white rounded-xl shadow-md p-6 mb-8">
            <h2 className="text-2xl font-bold mb-4 text-center">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</h2>
            
            <div className="text-center mb-6">
              <div className="text-5xl font-bold mb-2">
                {score} / {quizQuestions.length}
              </div>
              <p className="text-lg">
                {score === quizQuestions.length 
                  ? "–û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!" 
                  : score > quizQuestions.length / 2 
                    ? "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ." 
                    : "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"}
              </p>
            </div>
            
            <div className="mb-6">
              <h3 className="text-lg font-semibold mb-2">–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:</h3>
              <div className="space-y-2">
                {answers.map((answer, index) => (
                  <div 
                    key={index} 
                    className={`p-3 rounded-lg flex items-center gap-3 ${
                      answer.correct ? "bg-green-100" : "bg-red-100"
                    }`}
                  >
                    {answer.correct ? (
                      <Check className="h-5 w-5 text-green-600 shrink-0" />
                    ) : (
                      <X className="h-5 w-5 text-red-600 shrink-0" />
                    )}
                    <span>{answer.question}</span>
                  </div>
                ))}
              </div>
            </div>
            
            <Button 
              onClick={restartQuiz}
              className="w-full"
            >
              –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ
            </Button>
          </div>
        )}
        
        <div className="max-w-2xl mx-auto">
          <h2 className="text-2xl font-bold mb-4">–ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</h2>
          <ul className="list-disc list-inside space-y-2">
            <li>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.</li>
            <li>–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏.</li>
            <li>–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –±–∞–ª–ª.</li>
            <li>–í –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–≤–æ–π –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</li>
            <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ —É–∑–Ω–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!</li>
          </ul>
        </div>
      </main>
      
      <Footer />
    </div>
  );
};

export default QuizGame;
